#include<stdio.h>
#define NULL 0 

//链队列结构定义，front指向队列头结点，rear指向队列尾结点。
//链队列空的条件：rear==front

//链队列结点定义
typedef struct  queuenode
{
	int data;
	struct queuenode *next;
}Queuenode;

//链队列指针结点定义
typedef struct  linkqueue
{
	Queuenode *front ;
	Queuenode *rear ;
}Linkqueue;

//建空队列
Linkqueue  *Qnull()
{
	Linkqueue *Q;
	Queuenode *s;
	Q=new Linkqueue;
    s=new Queuenode;
	s->next = NULL ;
	Q->front=s;
	Q->rear=s;
	return  Q;
}

//判队列空
bool Qempty(Linkqueue *Q)
{
	if(Q->front==Q->rear)
		return  true;
	else
		return  false;
}

//取队头
Queuenode *GetFront(Linkqueue *Q)
{
	if(Qempty(Q))
		return  NULL;
	else
		return  Q->front->next;
}

//入队
void InQueue(Linkqueue *Q,int x)
{
	Queuenode *s;
    s=new Queuenode;
	s->data = x;
	s->next = NULL;
	Q->rear->next=s;
	Q->rear=s;
}

//出队
//返回false表示队空， 返回true表示出队成功。
bool OutQueue(Linkqueue *Q)
{
	if(Qempty(Q)==true)//判队空
	{
		printf("队列空！");
		return false;
	}
	else
	{
		Queuenode *s;
		s=Q->front->next;
		Q->front->next=s->next;
		delete s;
		//考虑队列中只有一个结点的边界情况，删除后rear指针悬空，这时把front,rear都指向头结点
		if(Q->front->next==NULL)
			Q->rear=Q->front;
		return true;
	}
}

void main()
{
	Linkqueue  *Q;
	Q=Qnull();
	int n=10,i,j,k1,k2;
	InQueue(Q,0);
	InQueue(Q,1);
	InQueue(Q,0);
	for(i=1;i<=n;i++)
	{
		for(j=1;j<i+2;j++)
		{
			k1=GetFront(Q)->data;
			OutQueue(Q);
			if(k1!=0)
				printf("%d\t",k1);
			k2=GetFront(Q)->data;
			InQueue(Q,k1+k2);
		}
		InQueue(Q,0);
		printf("\n");
	}
}