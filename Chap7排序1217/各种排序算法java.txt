       1、写出对数组进行直接插入排序的算法，然后在主函数中调用这个直接插入排序，对主程序中的数据进行排序并输出。
        ****************************  直接插入排序  *******************************
		public static void main(String[] args) {
		int i, test[]={10,50,32,5,76,16,9,40,88,89,4,-9,788,-90,72};
		straightsort(test);

		for (i = 0; i < test.length; i++)
			System.out.println(test[i]);
	}

	static void straightsort(int []aa)
	{
		int i,j,x,n=aa.length;
		for(i=1;i<n;i++)  //外层循环控制趟数，一趟可以把一个元素加入有序区
		{
			j = i-1;
			x = aa[i];
			while(j>=0 && aa[j] > x)
			{
				aa[j+1] = aa[j] ;
				j--;
			}
			aa[j+1] = x ;
		}
	}


        2、写出对数组进行二分插入排序的算法，然后在主函数中调用这个二分插入排序，对主程序中的数据进行排序并输出。
        ****************************  二分插入排序  *********************************************
	public static void main(String[] args) {

		int i, test[] = { 10, 50, 32, 5, 76, 16, 9, 40, 88, 89, 4, -9, 788,
				-90, 72 };
		TwoInsertSort(test);

		for (i = 0; i < test.length; i++)
			System.out.println(test[i]);

	}

	static void TwoInsertSort(int[] aa) {
		int low, high, x, middle, j, i, n = aa.length;
		for (i = 1; i < n; i++) {   //外层循环控制趟数，一趟可以把一个元素加入有序区
			low = 0;// 准备
			high = i - 1;
			x = aa[i];
			while (high >= low)// 二分法查找插入位置，low大于high时结束循环，此时的low就是插入位置
			{
				middle = (low + high) / 2; // 　指向已排序好的中间位置
				if (x < aa[middle])// 即将插入的元素应当在在左区间
					high = middle - 1;
				else
					// 　即将插入的元素应当在右区间
					low = middle + 1;
			}
			// 每次查找完毕后，low总比high大，a[low]总是存放第一个比x大的数，因此应从此处开始，每个元素右移一位，并将x存入a[low]中，这样就保证了a[0...i]是排好序的
			for (j = i - 1; j >= low; j--)				
			{
				aa[j + 1] = aa[j];// 　后移排序码大于R[i]的记录
			}
			aa[low] = x;// 插入
		}
	}








        3、写出对数组进行希尔排序的算法，然后在主函数中调用这个希尔排序，对主程序中的数据进行排序并输出。
        ****************************  希尔排序  *********************************************
	public static void main(String[] args) {
		int i, test[] = { 10, 50, 32, 5, 76, 16, 9, 40, 88, 89, 4, -9, 788,-90, 72 };
		shellsort(test);

		for (i = 0; i < test.length; i++)
			System.out.println(test[i]);
	}

	static void shellsort(int[] aa) {
		int d, i, j, x, n = aa.length;
		for (d = n / 2; d >= 1; d = d / 2) {      
			for (i = d; i < n; i = i + 1) {
				j = i - d;
				x = aa[i];
				while (j >= 0 && aa[j] > x) {
					aa[j + d] = aa[j];
					j = j - d;
				}
				aa[j + d] = x;
			}
		}
	}


        4、写出对数组进行冒泡排序的算法，然后在主函数中调用这个冒泡排序，对主程序中的数据进行排序并输出。
	//****************************  冒泡排序  *********************************************
	public static void main(String[] args) {
		int i, test[]={10,50,32,5,76,16,9,40,88,89,4,-9,788,-90,72};
		BubbleSort(test);

		for (i = 0; i < test.length; i++)
			System.out.println(test[i]);
	}

	static void BubbleSort(int  []aa)
	{
		int i,j,x,n=aa.length;
		int exchange;
		for(i=1;i<n-1;i++) //外层循环控制趟数，一趟可以确定一个元素的最终位置
		{
			exchange=0; //本趟排序开始前，交换标志应为假
			for(j=0;j<n-i;j++)  // 最多做 n-1 趟排序
			{
				if(aa[j+1]<aa[j])
				{
					x=aa[j+1];
					aa[j+1]=aa[j];
					aa[j]=x;
					exchange=1;
				} 
			}
			if(exchange==0)//本趟排序未发生交换，提前终止算法
				break;
		}
	}


        5、写出对数组进行快速排序的算法，然后在主函数中调用这个快速排序，对主程序中的数据进行排序并输出。
	//****************************  快速排序  *********************************************
	public static void main(String[] args) {
		int i, test[]={10,50,32,5,76,16,9,40,88,89,4,-9,788,-90,72};
		quicksort(test,0, test.length-1);

		for (i = 0; i < test.length; i++)
			System.out.println(test[i]);
	}

	static int quickpass(int []a,int low,int high)  //一趟快速排序
	{
		int i = low, j = high;
		int  temp = a[low];	/*取第一个数据元素为进行调整的标准数据元素*/
		while(i < j)
		{
			while(i < j && temp <= a[j]) j--;		//*在数组的右端扫描,找一个比temp小的元素
			if(i < j)
			{
				a[i] = a[j];
				i++;
			}

			while(i < j && a[i] < temp) i++;		//在数组的左端扫描*，找一个比temp大的元素
			if(i < j)
			{
				a[j] = a[i];
				j--;
			}
		}
		a[i] = temp;
		return i;
	}
	static void quicksort(int []a,int low,int high)   //整个数组的快速排序
	{
		int k;
		if(high>low)
		{
			k=quickpass(a,low,high);
			quicksort(a,low,k-1);
	        	quicksort(a,k+1,high);
		}
	}
